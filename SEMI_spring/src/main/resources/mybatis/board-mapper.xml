<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.semi.update.mapper.Board">

	<resultMap type = "boardDto" id = "ResultMap">
		<result property = "boardNo" column = "BOARD_NO"/>
		<result property = "id" column = "ID"/>
		<result property = "memberName" column = "BOARD_NAME"/>
		<result property = "boardTitle" column = "BOARD_TITLE"/>
		<result property = "boardContent" column = "BOARD_CONTENT"/>
		<result property = "boardRegdate" column = "BOARD_REGDATE"/>
		<result property = "boardLike" column = "BOARD_LIKE"/>
		<result property = "filePath" column = "BOARD_FILEPATH"/>
		<result property = "imgPath" column = "BOARD_IMGPATH"/>
		<result property = "thumbnail" column = "BOARD_THUMBNAIL"/>
		<result property = "profileSrc" column = "MEMBER_CONTENT"/>
	</resultMap>
	
	<insert id="insertImg" parameterType="boardDto">
		INSERT INTO FREE_BOARD(BOARD_NO, ID, BOARD_IMGPATH, BOARD_THUMBNAIL) 
		VALUES(FREE_BOARD_SEQ.NEXTVAL, #{id}, #{imgPath}, #{thumbnail})
	</insert>
	
	<select id="getBoardNo" parameterType="boardDto" resultMap="ResultMap">
		SELECT BOARD_NO FROM FREE_BOARD
		WHERE ID = #{id}
		AND BOARD_THUMBNAIL = #{thumbnail}
	</select>
	
	
	<!-- 이미지 추가후 나머지 내용 update -->
	<update id="updateRestContent" parameterType="boardDto">
		UPDATE FREE_BOARD
		SET BOARD_NAME = #{memberName}, BOARD_TITLE = #{boardTitle}, BOARD_CONTENT = #{boardContent}, BOARD_REGDATE = SYSDATE, BOARD_LIKE = 0, BOARD_FILEPATH = #{filePath}
		WHERE ID = #{id}
		AND BOARD_NO = #{boardNo}
	</update>
	
	<!-- 이미지 추가 안했을때 board insert -->
	<insert id="insertNoImgBoard" parameterType="boardDto">
		INSERT INTO FREE_BOARD 
		VALUES(FREE_BOARD_SEQ.NEXTVAL, #{id}, #{memberName}, #{boardTitle}, #{boardContent}, SYSDATE, 0, #{filePath}, null, null)
	</insert>
	
	
	<!-- 전체 게시물 구하기 + 검색후 전체 게시물 구하기-->
	<select id="getTotalBoard" parameterType="boardDto" resultType="int">
		SELECT COUNT(*)
		FROM FREE_BOARD
		<trim prefix = "WHERE" prefixOverrides = "AND">
			<if test="category == 'title' and keyword != null and keyword != ''">
				AND BOARD_TITLE LIKE ('%' || #{keyword} || '%')
			</if>
			<if test="category == 'content' and keyword != null and keyword != ''">
				AND BOARD_CONTENT LIKE ('%' || #{keyword} || '%')
			</if>
			<if test="category == 'name' and keyword != null and keyword != ''">
				AND BOARD_NAME LIKE ('%' || #{keyword} || '%')
			</if>
		</trim>
	</select>
	
	<!-- 전체 가져오기  + 페이징 + 검색  -->
	<!--
		# <trim>
		1.prefix 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여준다.
		2.prefixOverrides 처리 후 엘리먼트 내용 중 가장 앞에 해당 문자들이 있다면 자동으로 지워준다.
		3.suffix 처리 후 엘리먼트 내에 내용이 있으면 가장 뒤에 붙여준다.
		4.suffixOverrides 처리 후 엘리먼트 내용 중 가장 뒤에 해당 문자들이 있다면 자동으로 지워준다.
	-->
	<select id="boardList" parameterType="boardDto" resultMap="ResultMap">
		SELECT X.RN, X.BOARD_NO, X.ID, X.BOARD_NAME, X.BOARD_TITLE, X.BOARD_CONTENT, X.BOARD_REGDATE, X.BOARD_LIKE, X.BOARD_THUMBNAIL
		FROM(
			SELECT ROWNUM as RN, A.BOARD_NO, A.ID, A.BOARD_NAME, A.BOARD_TITLE, A.BOARD_CONTENT, A.BOARD_REGDATE, A.BOARD_LIKE, A.BOARD_THUMBNAIL 
			FROM (
				SELECT BOARD_NO, ID, BOARD_NAME, BOARD_TITLE, BOARD_CONTENT, BOARD_REGDATE, BOARD_LIKE, BOARD_THUMBNAIL 
				FROM FREE_BOARD
					<trim prefix = "WHERE" prefixOverrides = "AND">
						<if test="category == 'title' and keyword != null and keyword != ''">
							AND BOARD_TITLE LIKE ('%' || #{keyword} || '%')
						</if>
						<if test="category == 'content' and keyword != null and keyword != ''">
							AND BOARD_CONTENT LIKE ('%' || #{keyword} || '%')
						</if>
						<if test="category == 'name' and keyword != null and keyword != ''">
							AND BOARD_NAME LIKE ('%' || #{keyword} || '%')
						</if>
					</trim>
				ORDER BY BOARD_NO DESC) A
			WHERE ROWNUM <![CDATA[<=]]> #{endBoardNo}) X
		WHERE X.RN >= #{startBoardNo}	
	</select>
	
	<!-- select One : 
		유저의 프로필 사진을 가져와야해서 3중 조인을 하였음
		질의문을 통한 join(ANSI 아님) >> FREE_BOARD, MEMBER_JOIN, MEMBER_PROFILE -->
	<select id="selectOne" resultMap="ResultMap">
		SELECT f.BOARD_NO, f.ID, f.BOARD_NAME, f.BOARD_TITLE, f.BOARD_CONTENT, f.BOARD_LIKE, f.BOARD_FILEPATH, f.BOARD_IMGPATH, f.BOARD_THUMBNAIL, m.MEMBER_CONTENT 
		FROM FREE_BOARD f, MEMBER_JOIN J, MEMBER_PROFILE m
		WHERE f.ID = j.ID
		AND j.ID = m.ID
		AND f.BOARD_NO = #{boardNo}
	</select>
	
	
	<!-- 이미지 수정 -->
	<update id="updateImg" parameterType="boardDto">
		UPDATE FREE_BOARD
		SET BOARD_IMGPATH = #{imgPath}, BOARD_THUMBNAIL= #{thumbnail}
		WHERE ID = #{id}
		AND BOARD_NO = #{boardNo}
	</update>
	
	
	<!-- 이미지 없을시 -->
	<update id="updateNoImgBoard" parameterType="boardDto">
		UPDATE FREE_BOARD
		SET BOARD_TITLE = #{boardTitle}, BOARD_CONTENT = #{boardContent}, BOARD_FILEPATH = #{filePath}, BOARD_REGDATE = SYSDATE,
		BOARD_IMGPATH = null, BOARD_THUMBNAIL = null
		WHERE ID = #{id}
		AND BOARD_NO = #{boardNo}
	</update>
	
	
	<!-- 이미지 있을시 게시판 수정 -->
	<update id="updateBoard" parameterType="boardDto">
		UPDATE FREE_BOARD
		SET BOARD_TITLE = #{boardTitle}, BOARD_CONTENT = #{boardContent}, BOARD_FILEPATH = #{filePath}, BOARD_REGDATE = SYSDATE
		WHERE ID = #{id}
		AND BOARD_NO = #{boardNo}
	</update>


	<!-- 전체 게시물 구하기 + 검색후 전체 게시물 구하기-->
	<select id="getMyTotalBoard" resultType="int">
		SELECT COUNT(*)
		FROM FREE_BOARD
		WHERE ID = #{id}
		<if test="category == 'title' and keyword != null and keyword != ''">
			AND BOARD_TITLE LIKE ('%' || #{keyword} || '%')
		</if>
		<if test="category == 'content' and keyword != null and keyword != ''">
			AND BOARD_CONTENT LIKE ('%' || #{keyword} || '%')
		</if>
		<if test="category == 'name' and keyword != null and keyword != ''">
			AND BOARD_NAME LIKE ('%' || #{keyword} || '%')
		</if>
	</select>
	
	<!-- 전체 가져오기  + 페이징 + 검색  -->
	<!--
		# <trim>
		1.prefix 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여준다.
		2.prefixOverrides 처리 후 엘리먼트 내용 중 가장 앞에 해당 문자들이 있다면 자동으로 지워준다.
		3.suffix 처리 후 엘리먼트 내에 내용이 있으면 가장 뒤에 붙여준다.
		4.suffixOverrides 처리 후 엘리먼트 내용 중 가장 뒤에 해당 문자들이 있다면 자동으로 지워준다.
	-->
	<select id="myBoardList" parameterType="boardDto" resultMap="ResultMap">
		SELECT X.RN, X.BOARD_NO, X.ID, X.BOARD_NAME, X.BOARD_TITLE, X.BOARD_REGDATE, X.BOARD_LIKE, X.BOARD_THUMBNAIL 
		FROM(
			SELECT ROWNUM as RN, A.BOARD_NO, A.ID, A.BOARD_NAME, A.BOARD_TITLE, A.BOARD_REGDATE, A.BOARD_LIKE, A.BOARD_THUMBNAIL 
			FROM (
				SELECT BOARD_NO, ID, BOARD_NAME, BOARD_TITLE, BOARD_REGDATE, BOARD_LIKE, BOARD_THUMBNAIL 
				FROM FREE_BOARD
				WHERE ID = #{id} 
				<if test="category == 'title' and keyword != null and keyword != ''">
					AND BOARD_TITLE LIKE ('%' || #{keyword} || '%')
				</if>
				<if test="category == 'content' and keyword != null and keyword != ''">
					AND BOARD_CONTENT LIKE ('%' || #{keyword} || '%')
				</if>
				<if test="category == 'name' and keyword != null and keyword != ''">
					AND BOARD_NAME LIKE ('%' || #{keyword} || '%')
				</if>
				ORDER BY BOARD_NO DESC) A
			WHERE ROWNUM <![CDATA[<=]]> #{endBoardNo}) X
		WHERE X.RN >= #{startBoardNo}
	</select>
	
	<delete id="multiBoardDelete" parameterType="map">
		DELETE FROM FREE_BOARD WHERE BOARD_NO IN 
		<foreach collection="boardNoArr" item="boardNo" open="(" separator="," close=")"> <!-- ==> (1,2,3) -->
		<!-- map을 통해 전달받은 "seqs"라는 key에 값으로 item을 받고  	 -->
		<!-- 받아온 item의 seq는 배열이며, 해당 배열을 하나씩 읽어서 담는다.   -->
		<!-- 값을 담는 구조는 open, separator, close을 이용한다. -->
		<!--  open은 "("를 열고 close는 ")"를 닫는다. () separator는 ,를 만들어 값을 구문한다.-->
		<!-- (,,,)형식으로 담은 값을 순차적으로 반복해서 바디에 내보낸다. >>> #{seq} -->
			#{boardNo}
		</foreach>
	</delete>
	
    

</mapper>
