@ 운영체제 2주 4차 스레드 개념

### 용어정리

- 스레드

    프로세스의 특성인 자원과 제어에서 제어만 분리한 실행 단위로써 프로세스 하나는 스레드 한 개 이상으로 나눌 수 있다.

- 다중 스레드

    프로그램 하나를 여러 실행 단위로 쪼개어 실행한다는 측면에서 다중 처리한다.

- 스레드의 장점

    사용자 응답성 증가하고 프로세스의 자원과 메모리 공유가 가능하다. 경제성 좋으며 
    다중 처리(멀티 프로세싱)로 성능과 효율이 향상된다.

- 오버헤드

    오버헤드는 어떤 처리를 하기 위해 들어가는 간접적인 처리 시간 · 메모리 등을 말한다. 
    예를 들어 A라는 처리를 단순하게 실행한다면 10초 걸리는데, 안전성을 고려하고 부가적인 
    B라는 처리를 추가한 결과 처리시간이 15초 걸렸다면, 오버헤드는 5초가 된다

---

### 스레드의 개념

1. 정의

- 프로세스의 작업 기본 단위
- 프로세스에서 명령어를 독립적으로 실행 할 수 있는 흐름
- 작업(Job) 프로세스의 특성인 자원과 제어에서 제어만 분리한 실행 단위

1) 경량프로세스(LWP, Light Weight Process)

- 프로세스의 속성 중 일부가 들어 있는 것 (=일반적으로 말하는 스레드)
- 여러스레드를 사용하는 프로세스

2) 중량 프로세스 HWP, Heavy Weight Process

- 스레드 하나에 프로세스 하나인 전통적인 경우

2. 특징

- 프로세스 하나는 스레드 한 개 이상으로 나눌 수 있음
- 프로세스의 직접 실행 정보를 제외한 나머지 프로세스 관리 정보 공유
- 다른 프로시저 호출, 다른 실행 기록(별도 스택필요)
- 관련 자원과 함께 메모리 공유 가능하므로 손상된 데이터나 스레드 이상 동작 고려
- 같은 프로세스의 스레드들은 동일한 주소 공간 공유
- 동일 프로세스의 여러 스레드는 코드 영역, 데이터 영역, 
운영체제 자원(예: 열린 파일, 시그널)을 공유
- 프로세스가 다수의 제어 스레드를 가진다면, 프로세스는 동시에 
하나 이상의 작업을 실행할 수 있음(= 멀티 스레드)

즉, 동일한 프로세스라면 스레드는 공유할 수 있는 자원들을 공유 한다.

3. 스레드 병렬 수행

- 정의1 : 프로세스 하나에 포함된 스레드들은 공동의 목적 달성을 위해 병렬 수행
- 정의2 : 프로세스가 하나인 서로 다른 프로세서에서 프로그램의 다른 부분 동시 실행

4. 스레드 병렬 수행의 이점

- 사용자 응답성 증가(결론적으로 사용 속도가 빨라진다.)
- 프로세스의 자원과 메모리 공유 가능
- 경제성 좋음

    > 프로그램 실행중 서로다른 프로세스가 프로세서(cpu)를 점유 할 때 발생하는 
    문맥교환 같은 일이 스레드에서도 발생한다. 그런데 같은 프로세스의 스레드는 
    자원의 많은 부분을 서로 공유한다. 이 때문에 문맥교환시 프로세서보다 
    낮은 비용이 발생한다. 때문에 경제성이 좋다고 하는것이다.

- 다중처리(멀티 프로세싱)로 성능과 효율 향상

### 단일 스레드와 다중 스레드

1. 단일 스레드
- 프로세스 하나에 스레드 하나가 실행되는 전통적인 방식으로 스레드의 개념 불확실함.
(= 중량 프로세스)

    ex) Dos 운영체제

 2.  다중 스레드

- 프로그램 하나를 여러 실행 단위로 쪼개어 실행한다는 측면에서 
다중 처리(다중 프로세싱)와 의미가 비슷함.

    ex) 윈도우 운영체제 등

    즉,  스레드별로 실행 환경 정보가 따로 있지만 서로 많이 공유하므로, 
    프로세스보다 동일한 프로세스의 스레드에 프로세서를 할당하거나 
    스레드 간의 문맥 교환이 훨씬 경제적임

- 참고사진 : 운영체제 2주차 4차 01.jpg

3. 스레드 이용 예제

- 현대 운영체제의 대다수 소프트웨어 패키지는 다중 스레드를 지원함
- 웹 브라우저의 스레드 이용 예

    > 이미지와 텍스트를 표시(display)하는 스레드 1개

    > 네트워크로부터 데이터를 읽어는 스레드 1개

- 워드 프로세서의 스레드 이용 예

    > 그래프를 표시(Display)하는 스레드 1개

    > 스펠링, 문법 검사를 수행하는 스레드 1개

- 많은 운영체제 커널들이 현재 다중 스레드 기반

    > 여러 스레드들이 커널 내에서 동작함

    > 각 스레드는 장치를 관리하거나 인터럽트를 처리하는 등 
    특정 작업을 수행함

4. 웹 서버 스레드 이용 예제

- 단일 스레드 웹 서버

    > 한 클라이언트 요청에 대한 서비스를 완료할 때까지 다른 클라이언트 
    요청에 대한 서비스를 기다려야 함

- 다중 프로세스 웹 서버

    > 스레드가 일반화되기 전에 사용되었으며, 새로운 프로세스를 생성하여 
    추가적인 클라이언트 요청을 처리함. (서버가 과부화되어 다운되는 문제를 야기했다.)

- 다중 스레드 웹 서버

    > 프로세스에 비해 오버헤드가 작은 스레드를 생성하여 여러 
    클라이언트에 대해 동시에 서비스함

 5.  다중 스레드 프로그램의 장점

1) **반응성(Responsiveness)** : 

상호작용 응용의 다중 스레딩은 하나의 스레드가 일시 봉쇄(Blocking)되어도 
다른 스레드는 수행을 계속하게 함 ⇨ 사용자 응답성 증가

2) **자원공유(Resource Sharing)** : 

하나의 프로세스에 속한 여러 스레드는 메모리 등의 자원을 공유

3) **경제성(Economy)** : 

스레드는 자신이 속한 프로세스의 자원들을 공유하기 때문에 스레드를 생성하고 
문맥을 교환하는 것이 보다 더 경제적임

4) **확장성(scalability)** **- 다중 프로세서 구조의 활용** :

다중 프로세서(다중 코어) 시스템에서 스레드는 서로 다른 프로세서(코어)에서 
병렬로 실행될 수 있음

 6.  사용자 스레드(User thread) vs 커널 스레드(Kernel thread)

1) 사용자 스레드(User thead) 

- 사용자 수준(User level)에서 지원
- 사용자 스레드는 프로그래머에게는 보이나 커널에게는 알려지지 않는 스레드임
- 스레드 관리는 사용자 레벨 스레드 라이브러리에 의해 이루어짐(스레드 API 사용)
- 사용자 스레드는 커널 위(Above)에서 동작하므로, 커널의 지원 없이 관리됨

ex ) POSIX Pthreads, Win32 threads, Java threads

2) 커널 스레드(Kernel thread == 시스템 스레드) 

- 커널 수준(Kernel level)에서 지원
- 운영체제 커널은 커널 수준에서 스레드를 지원하고 관리함
- 커널 스레드는 운영체제 커널에 의해 직업 지원받고 관리됨

ex) Windows XP/2000, Solaris, Linux, Tru64 UNIX, Mac OS X

즉, 일반적으로 사용자 스레드는 커널 스레드보다 더 빨리 생성하고 관리할 수 있음, 
왜냐하면 커널의 개입이 필요하지 않기 때문임

 7.  사용자 스레드들와 커널 스레드들 사이의 관계

1) 다대일 (Many-to-One) 모델:
여러 사용자 스레드들이 하나의 커널 스레드에 매핑됨

- 스레드 관리는 사용자 공간의 스레드 라이브러리에 의해 이루어짐
- 사용자가 원하는 만큼의 많은 사용자 스레드를 생성 할 수 있으므로 효율적임
- 하나의 스레드가 봉쇄형(blocking) 시스템 호출을 할 경우, 전체 프로세스가 봉쇄됨
- 한 번에 하나의 스레드만이 커널에 접근할 수 있기 때문에, 다중 스레드가 
다중 프로세서에서 돌아도 병렬로 작동할 수 없음

ex) 솔라리스 스레드 라이브러리, GNU Portable 스레드

2) 일대일 (One-to-One) 모델:
하나의 사용자 스레드는 하나의 커널 스레드에 매핑됨

- 다대일 모델보다 더 많은 병렬성을 제공함
- 하나의 스레드가 봉쇄되더라도 다른 스레드들은 계속 수행됨
- 다중 처리기(혹은 다중 코어)에서 다중 스레드가 병렬적으로 수행되기도 함
- 사용자 스레드 생성은 대응하는 커널 스레드를 필요로 함
- 하나의 프로세스가 생성할 수 있는 스레드 수는 다대일 모델보다 적음

    > 너무 많은 스레드를 생성하지 않도록 주의해야 함

ex) Windows NT/XP/2000, Linux, Solaris 9과 그 이후 버전

3) 다대다 (Many-to-Many) 모델 :
여러 사용자 스레드가 여러 커널 스레드와 매핑됨

- 정확히는 여러 사용자 스레드들이 그 보다 더 적은 수의 커널 스레드와 매핑됨
- 운영체제가 충분한 수의 커널 스레드를 생성하도록 함
- 응용은 원하는 수 만큼의 사용자 스레드들을 생성하고 이들에 대응하는 커널 스레드들이 다중 처리기에서 병렬로 수행될 수 있음
- 다대일과 일대일의 장점을 취한 접근법

ex) Solaris 9 이전 버전, ThreadFiber 패키지를 가진 Windows NT/2000

### 스레드의 상태변화

- 프로세서 함께 사용, 항상 하나만 실행
- 한 프로세스에 있는 스레드는 순차적 실행, 해당 스레드의 정보 저장레지스터, 스택)
- 프로세스 생성하면 해당 프로세스의 스레드도 함께 생성됨

    > 단, 스레드 생성에서는 운영체제가 부모 프로세스와 공유할 자원 초기화 필요 없음

- 프로세스의 생성과 종료보다는 오버헤드 훨씬 적음
- 스레드 한 개가 대기 상태로 변환 시 전체 프로세스 대기 상태로 변환하지 않음
- 실행 상태의 스레드가 대기 상태가 되면 다른 스레드 실행 가능
(서로 독립적이지는 않음)
- 프로세스 하나에 있는 전체 스레드는 프로세스의 모든 주소에 접근 가능하여 
스레드 한개가 다른 스레드의 스택 읽기나 덮어 쓰기 가능
- 프로세서는 여러 사용자가 생성하여 서로 경쟁적으로 자원 요구하고 서로 다른 관계를 유지해야 하지만, 스레드는 사용자 한 명이 여러 스레드로 개인 프로세스 하나 소유

1. 스레드 제어(TCB) 블록 
- 정보 저장
- 프로세스 제어 블록은 스레드 제어 블록의 리스트
- 스레드 간에 보호 하지 않음
- 프로세서 제어블록(PCB)와 비슷하게 스레드를 관리하기 위해 사용

    1) TCB의 내용

    - 실행 상태 : 
    프로세서 레지스터, 프로그램 카운터, 스택 포인터
    - 스케줄링 정보 :
    상태(실행, 준비, 대기), 우선순위, 프로세서 시간
    - 계정 정보

프로세스와 스레드의 차이점은 무엇일까요?

교수님 답) 
프로세스는 실행 중인 프로그램으로 리소스와 스레드로 구성되어 있습니다. 
그리고 프로세스는 하나 이상의 스레드를 가지고 있습니다. 스레드는 경량화된 
프로세스로서 프로세스 내에서 실제 작업을 수행하고 있습니다.

---

## **학습목표**

- 스레드의 개념을 이해할 수 있다.
- 단일 스레드와 다중 스레드를 비교하여 설명할 수 있다.
- 스레드의 상태변화에 대해 설명할 수 있다.

## 학습정리

1. 스레드의 개념

```
1. 프로세스의 특성인 자원과 제어에서 제어만 분리한 실행 단위이다.
2. 프로세스 하나는 스레드 한 개 이상으로 나눌 수 있다.
3. 프로세스의 직접 실행 정보를 제외한 나머지 프로세스 관리 정보 공유한다.
4. 다른 프로시저를 호출하고 다른 실행을 기록한다.(별도 스택 필요)
5. 관련 자원과 함께 메모리 공유 가능하므로 손상된 데이터나 스레드의 이상 동작을 고려한다.
6. 경량 프로세스 LWP는 프로세스의 속성 중 일부가 들어 있는 것이다.
7. 중량 프로세스 HWP는 스레드 하나에 프로세스 하나인 전통적인 경우이다.
8. 같은 프로세스의 스레드들은 동일한 주소 공간 공유한다.
9. 동일 프로세스의 여러 스레드는 코드 영역, 데이터 영역, 운영체제 자원(예: 열린 파일, 시그널)을 공유한다.
10. 프로세스가 다수의 제어 스레드를 가진다면, 프로세스는 동시에 하나 이상의 작업을 실행할 수 있다.
```

2. 단일 스레드와 다중 스레드

```
1. 운영체제 프로세스는 운영체제 프로세스는 프로세스 상태 순서를 제어하거나 사용하고 있는 프로세스가 다른 사용자나 운영체제 영역을 침범하지 못하게 감시하는 기능을 담당한다.
2. 사용자 프로세스는 사용자 프로세스는 사용자 코드를 수행한다.
3. 병행프로세스는 서로 독립적으로 실행되는 독립 프로세스와 프로세스들이 서로 협력하며 수행되는 협동 프로세스로 구분된다.
```

3. 스레드의 상태변화

```
1. 프로세서 함께 사용하며 항상 하나만 실행한다.
2. 한 프로세스에 있는 스레드는 순차적 실행한다. (해당 스레드의 정보 저장레지스터, 스택)
3. 프로세스 생성하면 해당 프로세스의 스레드도 함께 생성된다. 단, 스레드 생성에서는 운영체제가 부모 프로세스와 공유할 자원 초기화 필요 없다.
4. 프로세스의 생성과 종료보다는 오버헤드 훨씬 적다.
5. 스레드 한 개가 대기 상태로 변환 시 전체 프로세스 대기 상태로 변환하지 않는다.
6. 실행 상태의 스레드가 대기 상태가 되면 다른 스레드 실행 가능하다.(서로 독립적이지 않다.)
7. 프로세스 하나에 있는 전체 스레드는 프로세스의 모든 주소에 접근 가능하여 스레드 한 개가 다른 스레드의 스택 읽기나 덮어 쓰기 가능하다.
8. 프로세서는 여러 사용자가 생성하여 서로 경쟁적으로 자원을 요구하고 서로 다른 관계를 유지해야 하지만 스레드는 사용자 한 명이 여러 스레드로 개인 프로세스 하나 소유한다.
```