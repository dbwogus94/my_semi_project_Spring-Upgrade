@운영체제 2주 1차


# 용어 정리 

- 프로그램 :
	프로그램은 수행 해야하는 명령어들의 목록(문서)이다.

- 프로세스 :
	한 줄 정의 : 실행 중인 프로그램을 말함

	정의 1) 	
	- 프로세스는 실행 중인 프로그램으로 여기서 실행중인 프로그램이란 
	디스크에 저장되어 있던 실행 가능한 프로그램이 메모리에 적재되어 
	(프로세서에 의해) 운영체제의 제어를 받는 상태를 의미한다.

	정의 2) 
	- 프로세스는 "메모리에 적재되어 프로세서(cpu)에 의해 실행중인 [프로그램]"

	정의3) 
	- 프로세스는 커널의 관리 블록(PCB)에 작성된 프로그램이다.(이번 장에서 추가)
		> PCB는 커널내에 존재한다. 
		즉, 커널에 등록된 프로그램이라는 뜻이며 
		이는 실행중인 프로그램을 말한다.
	
- PCB(Process Control Block) :
	> 프로세스에 할당된 자원에 대한 정보를 가지고 있다.
	> 커널에 등록된 각 프로세스들에 대한 정보를 저장하는 영역

- 병행프로세스 :
	프로세스가 여러 개 동시에 실행되는 개념이다.

- 자원
	커널에 의해 다른 주체(Process)에게 할당 또는 반납되는 피동적인 개체
		> pc의 한정된 자원들은 커널에 의해 분배된다.
		> 자원은 하드웨어 자원 외에 소프트웨어 자원도 있다.

- 커널 : 
	1주 1차에서 커널의 정의를 했었지만 추가로 재정의를 한다.
	
	한줄정의 )  
	- 커널의 주요 기능은 컴퓨터의 속한 자원들에 대한 접근을 중재하는 것입니다.

	단순화 설명) 
	- 커널을 운영체제의 핵심 부분이다.
	- 어떤 역할을 하는지 쉽게 말한다면 응용프로그램을 실행할때 
	커널을 통하여 하드웨어(cpu, 메모리..)의 자원을 할당하고,
	실행해야하는 프로세스의 스케줄링을 해준다. 
	그 외에도 프로세스간 보안 및 여러 서비스를 제공한다.

	보편적 정의)
	- 컴퓨터의 커널은 운영체제의 핵심입니다. 
	운영체제의 다른 모든 부분에 여러 기본적인 서비스를 제공합니다. 
	시스템 자원(하드웨어)은 제한되어있지만 프로그램은 많기 때문에 커널은 
	프로그램의 수행상태인 프로세스 간의 보안 접근을 책임지는 소프트웨어입니다.
 
	- 커널이 이러한 프로세스마다 얼마만큼의 자원을 사용해야 하는지 결정해야하는데 
	이것을 스케줄링이라고 합니다.

	[출처 : https://12bme.tistory.com/288 ]
	

@ 학습내용

# 프로세스와 추가로 알아야 하는 개념
	
1. 작업(Job)의 개념 :
	- 실행 프로그램과 이에 필요한 입력 데이터의 묶음
	- 컴퓨터에 "실행 의뢰되기 전"의 상태
	
2. 프로세스(Process)의 개념 :
	- 커널에 등록된 작업 
	- 커널에 등록되어 커널의 관리하에 들어간 작업
	
	즉, 작업(프로그램 + 사용될 데이터)이 커널에 등록되어 지면 프로세스이다.

	**참고 : 운영체제 2주 1차 01.jpg

3. 다양한 프로세스의 정의 
	- 실행중인 프로그램(작업) 				// 가장 보편적인 정의
	- 프로세스 관리 블록(PCB)를 가지고 있는 프로그램이다.	// == 커널에 등록되었다. == 실행중이다
	- 커널에 등록되고 커널의 관리하에 있는 작업
	- 각종 자원들의 요청하고 할당 받을 수 있는 개체
	- 프로세스 관리 블럭을 할당받은 개체
	- 능동적인 개체
	- 실행 중에 각종 자원을 요구, 할당, 반납하며 진행
	
	**관련용어 
	 - 프로세스 관리 블럭 (PCB : Process Control Block)  
		> 커널 공간 (Kernel Space) 내에 존재  
		> 커널에 등록된 각 프로세스들에 대한 정보를 저장하는 영역

4. 자원의 개념
	- 커널에 의해 다른 주체(Process)에게 할당 또는 반납되는 피동적인 개체
		> pc의 한정된 자원들은 커널에 의해 분배된다.
	
	- 자원의 분류 
		> 하드웨어 자원 : 기억장치, 프로세서, 하드 디스크, 
			자기 테이프, 단말기, 모니터, 키보드 등 
		> 소프트웨어 자원 : 메시지, 시그널(Signal), 파일, 
			각종 공유 소프트웨어 등 
	
5. PCB(Process Control Block)가 가지고 있는 프로세스 정보
	1) 프로세스 고유 번호(PID : Process Identification Number) 
		
	2) 프로세스 우선순위 (priority)
	- 우선순위 : 기반 스케줄링 시 필요한 정보

		# 구체적인 설명 : 
		프로세스는 5가지 상태중 하나를 가진다.
		1. 생성(create) : 
		 	프로세스가 생성되는 중이다.
		2. 준비(ready) : 
			프로세스가 프로세서를 사용하고 있지는 않지만 
			언제든지 사용할 수 있는 상태로,  CPU가 할당되기를 기다리고 있다.
		3. 실행(running) : 
			프로세스가 프로세서를 차지하여 명령어들이 실행되고 있다.
		4. 대기(waiting) : 
			입출력 요구가 발생되어 현재 실행중인 프로세스가 중단되고, 
			입출력 처리가 완료될 때까지 대기하고 있는 상태 
			시그널 수신 등 어떤 사건을 기다리고 있는 상태를 말한다.
		5. 종료(terminated) : 
			프로세스의 실행이 종료되었다.

		운영체제는 준비 큐(Ready Queue), 대기 큐(Waiting Queue) 등의 자료구조를 두어 이들 프로세스를 관리한다.
		준비 큐는 준비 상태에 있는 프로세스들을 모아놓은 큐(Queue)이다. 
		운영체제는 CPU 스케줄러(CPU Scheduler)를 통해 준비 큐에 있는 프로세스 중 한 프로세스를 골라 다음에 실행시킨다.

		Q) 그런대 이때 준비 큐에 동시에 2개의 프로세스 p1, p2가 들어온다면 어떻게 될까?
		
		A)  이럴때를 대비해서 운영체제의 커널안의 PCB은 각각 프로세스의 우선순위 정보를 가지고 있다.
		PCB에 저장되어 있는 p1, p2의 우선순위중 더 높은 프로세스를 먼저 실행 상태로 만들고 해당 프로세스를 실행한다.
		이러한 작업이 운영체제의 주 기능인 cpu 스케줄러이다.
		
		[출처 : https://namu.wiki/w/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%20%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81]


	3) 프로세스 현재 상태 (current state) 
		> 프로세스는 5가지 상태중 하나를 가진다.
		(생성, 준비, 실행, 대기, 종료)

	4) 프로세스가 할당 받은 자원들의 리스트 또는 이들에 대한 포인터
		> 포인터 : 메모리 주소을 관리하는 자료형
	
	5) 문맥 저장 영역 (context save area)
	- 우선순위 : 기반 스케줄링 시 필요한 정보
		# 구체적 설명 : 
		프로세스 p1, p2가 준비 상태에서 PCB가 가지고 있는 우선순위에 따라
		p2가 실행상태가 되었다. 그런대 이때 어떠한 이유(스케줄링)로
		p2프로세서의 작업이 중간에 완료되지 못하고 
		다시 준비 상태로 들어가게 되는 경우가 발생한다.
		그렇게 되면 준비상태에 있던 p1이 실행상태가 되며,
		이러한 현상을 프로세서 "문맥교환"이라고 한다.
		이때 p2가 문맥교환 될 당시의 작업 현황 같은 것을 저장하는 것을 
		"문맥저장"이라고 한다.
		즉, PCB는 문맥교환에 따른 문맥 저장 정보를 가지고 있다.
	

	
# 프로세스의 종류

1. 운영체제 프로세스		// == 커널 프로세스 == 시스템 프로세스
	- 운영체제 프로세스는 프로세스 상태 순서를 제어하거나 
	사용하고 있는 프로세스가 다른 사용자나 운영체제 영역을 
	침범하지 못하게 감시하는 기능을 담당한다.

	- 사용자 프로세스를 생성하거나 입출력 프로세스를 
	생성하는 등 시스템 운영에 필요한 작업을 수행
	
	- [커널 프로세스] 또는 [시스템 프로세스]라고 한다.
		
	즉, 운영체제 프로세스는 프로세스 상태 제어(스케줄링), 영역 관리, 
	운영체제, 타 프로세스 보안 감시 기능을 담당한다.

2. 사용자 프로세스 
	- 사용자 프로세스는 사용자 코드를 수행하기 위한 프로세스이다
		> 프로그래머가 코딩한 코드

3. 병행 프로세스
	- 프로세스 여러 개가 동시에 실행되면 병행 프로세스라고 부름
	
	- 병행 프로세스는 서로 독립적으로 실행되는 "독립 프로세스"와 
	프로세스들이 서로 협력하며 수행되는 "협동 프로세스"로 구분

	1) 독립 프로세스 :
	운영체제에서 프로세스 여러 개가 병행하여 수행될 때 주어진 초깃값에 따라 
	항상 같은 결과를 보여주는 프로세스
	
	2) 협동 프로세스 :
	다른 프로세스에 영향을 주거나 다른 프로세스에 의해 영향을 받는 프로세스
		> 통신기능이 필요하며, 결과 값이 서로 다를 수도 있다.



# 프로세스의 상태변화

1. 프로세스의 상태
	1) 프로세스는 크게 '실행'과 '비실행' 프로세스로 나눌 수 있음
	- cpu를 점유하고 있는 실행 상태와 비실행 상태로 구분할 수 있다.
		> 디스패치 :
		비실행 상태에서 실행 상태로 변환		
	
		> 인터럽트	
		실행 상태에서 비실행 상태로 변환

	**참고 : 운영체제 2주 1차 02.jpg

	2) 프로세스는 구체적으로는 5가지 상태중 하나를 가진다.
	- 프로세스는 생성, 준비, 실행, 대기, 종료중 하나의 상태를 가진다

	> 생성상태(create) : 
	- 사용자가 요청한 작업이 커널에 등록됨
	- PCB가 할당되어 새로운 프로세스가 만들어지는 상태


	> 준비상태(ready) : 
	- 프로세스가 모든 필요한 자원을 할당 받고,
	프로세서(cpu)를 할당 받기 위해 기다리고 있는 상태
	- 즉시 실행 가능한 상태

	> 실행상태(running) : 
	- 프로세서(cpu)에 의해 실행되고 있는 상태 
	- 프로세스가 원하는 모든 자원을 소유한 상태
	
		*선점(Preemption) :
		- 실행중인 프로세스가 프로세서(cpu)의
		시간 할당량(time quantum, time slice)이나,
		우선순위 등으로 인하여 자신에게 할당된 프로세서를 반납해야 하는 경우 
		실행 상태에서 준비 상태로의 전이되는 것을 말한다.

		- 실행 중인 프로세스가 우선순위에 밀려서 cpu점유상태를 뺏기고 
		준비상태로 되돌아가는것
	
		* Timer Runout  : 
		선점 상황 중 하나로 실행 중인 프로세스가 
		cpu의 시간 할당량에 의해 작업을 완료하지 못하고 
		작업을 중단하고 준비상태로 되돌아 가는 것을 말한다.
		이후 다시 실행상태가 되어 이전 작업을 이어서 한다.

		*블럭(Block / Sleep) :
		프로세스가 실행 중 자원을 요청하거나 기타 다른 
		이유(입출력 등)로 system call을 하는 경우 대기 상태로 전이 	
	
	> 대기상태(waiting) : 
	- 프로세스가 프로세서 외의 특정 자원을 요청하고 
	이를 할당 받을 때까지 기다리고 있는 상태
	- 자원의 요청은 System Call을 통해 이루어짐
	- 커널 내의 자원 할당 Routine에서 관리
	- 입출력 요구가 발생되어 현재 실행중인 프로세스가 중단되고, 
	입출력 처리가 완료될 때까지 대기하고 있는 상태
	시그널 수신 등 어떤 사건(이벤트)을 기다리고 있는 상태를 말한다.
		
	> 종료(terminated) : 
	- 프로세스가 프로세서 외의 특정 자원을 요청하고 이를 할당 받을 때까지 기다리고 있는 상태

	> 추가 : 인터럽트 
	위의 인터럽트 정의 "실행 상황에서 비실행 상황으로 변환"을 다시 생각해 보자
	프로세스 5가지 상태에 맞추어 인터럽트를 다시 말하면
	프로세스가 "준비 상태"에서 실행이 되던 중 어떠한 이유(ex 입출력)에 의해 "대기 상태"가 되고 
	"다시 준비상태"가 되어  "다시 실행상태"가 되는 과정을 의미한다.

	ex) 프로세스 p1실행중 프린트를 실행한 상황에서 인터럽트의 과정 
	
	작업(프로그램)을 실행시키면 커널에 등록이 되고 PCB에 작성이 되며. 
	커널에 의해 프로세스 p1이 생성된다. 이후 프로세스 p1은 커널에 의해 
	준비 상태가 되고 스케줄링에 따라 커널에 의해 cpu를 점유, 실행 상태가 된다. 
	그리고 cpu에서 p1프로세스의 명령어가 실행이 되던 중 
	프린트 입출력 요구가 들어오게 되면, 이때 실행중이던 p1 프로세스는 현재까지 
	수행중이었던 상태(수행중이던 메모리 주소, 레지스터값, 하드웨어 상태 등...)를 
	해당 p1의 PCB에 저장한다. (인터럽트 핸들러, 인터럽트 백터 여기서는 생략하고 생각함.)
	이후 p1을 대기 상태로 변경하고 cpu가 프린트 입출력 작업을 완료하면
	p1을 대기상태에서 준비상태로 변경시키고 다시 실행 상태로 변경 cpu를 점유한다.
	PCB에 작성된 내용을 보고 이전에 작업한던 내용부터 p1프로세스의 작업을 
	이어서 실행한다.

	**참고 : 운영체제 2주 1차 03.jpg
	

2. 프로세스의 상태변화

	1) 프로세서(cpu) 스케줄러 :
	- 프로세서(cpu) 스케줄러에는 [장기(작업) 스케줄러], [단기(프로세스) 스케줄러], [중기 스케줄러]가 있다.
	- 프로세스의 상태 변화는 운영체제가 프로세서(cpu) 스케줄러 이용하여 관리

		1-1) 장기 스케줄러 (작업 스케줄러) :	
		- 작업 스케줄러는 스풀러가 디스크에 저장한 작업(프로그램) 중 실행할 작업(프로그램)을 
		선정하고 준비 리스트에 삽입하여 다중 프로그래밍의 정도 결정
			> 장기(작업) 스케줄러는 실행한 작업(프로그램)을 
			프로세서를 생성하고 준비상태로 만들어 준비리스트에 삽입한다.
			> 즉, 장기 스케줄러는 메모리와 디스크 사이의 스케줄링을 담당한다.
			그렇기 때문에 단기(프로세스) 스케줄러에 비해 호출되는 빈도가 적다.

		1-2) 단기 스케줄러(프로세스 스케줄러)
		- 단기(프로세스) 스케줄러는 장기(작업) 스케줄러가 생성하고 준비시킨 프로세스를
		준비에서 실행으로 또는 실행에서 대기 > 다시 준비 > 다시 실행으로 프로세스를 
		변화(스케줄링)한다.
	

		1-3) 중기 스케줄러	
		- cpu를 차지하기 위한 경쟁이 심해질 때 우선순위가 낮은 프로세스들을 잠시 제거한 후 
		나중에 경쟁이 완화 됬을 때 다시 디스크에서 메모리로 불러와
		중단되었던 부분부터 다시 실행한다.
	
		
	2) 프로세스를 스케줄링 하기 위한 3가지 Queue
	1. job Queue : 
		현재 시스템 내에 있는 모든 프로세스의 집합
	2. Ready Queue :
		현재 메모리 내에 있으면서 cpu를 점유 시행되기를 기다리는 프로세스의 집합	
	3. Device Queue : 
		Device I/O 작업을 대기하고 있는 프로세스의 집합 
	
	
	3) 프로세서 5가지 상태 변화 과정
	(+ 4가지 전의 과정 : 디스패치(Dispatch), Timer Runout, BLOCK, Wakeup)

	1. 프로세스가 생성에서 준비 상태(cpu를 할당받기를 기다리는 상태)로 변화 되는 과정	
	- 이러한 생성에서 준비 과정은 장기(작업) 스케줄러가 관장한다. 
		> 생성된 프로세스 중 cpu를 사용할 프로세스를 선별하여 
		준비리스트(Ready Queue)에 삽입한다.

	2. 프로세스가 준비상태에서 실행 상태(명령어가 실행되는 상태)로 변화 되는 과정
	== 디스패치(Dispatch) 과정
	- 디스패치 되는 과정은 단기(프로세스) 스케줄러가 관장한다.

	3. 실행 상태에서(작업시간이 너무 길어 완료하지 못하고) 준비상태로 변화되는 과정
	== Timer Runout 
	-  Timer Runout 되는 과정은 단기(프로세스) 스케줄러가 관장한다.
		> 프로세스당 한번 cpu를 점유할시 사용시간 제한이 있다. 
		예를 들어 p1 프로세스를 처리하는데 10초의 시간이 걸린다고 하자
		cpu를 한번 사용할때 처리 제한 시간은 5초라고 한다면, 
		p1이 처음 실행상태가 되어 cpu를 점유하고 5초뒤에 
		Timer Runout처리가 되어 준비상태로 돌아간다. 
		이후 다시 실행상태가 되서 실행이 완료되고 종료가 된다.

	4. 실행 상태에서(이벤트나 입출력 요청이 들어와서) 대기 상태로 변화되는 과정
	== BLOCK
	- BLOCK되는 과정은 단기(프로세스) 스케줄러가 관장한다.
	
	5. 대기 상태에서(이벤트나 입출력 처리가 끝나서) 준비상태로 변화되는 과정
	== Wakeup
	- Wakeup 되는 과정은 단기(프로세스) 스케줄러가 관장한다.
	


	**참고 : 운영체제 2주 1차 04.jpg


질문)
	우리가 컴퓨터로 노래를 들으면서 한글프로그램을 이용하여 숙제를 하는 경우에 컴퓨터 내부 프로세스는 어떻게 동작되는 걸까요?

교수님 답)
	컴퓨터 용어로 쓰이는 프로세스는 실행 중인 프로그램을 의미합니다. 
	프로세스가 실행되는 동안 생성, 준비, 실행, 대기, 종료의 상태들을 거치는데, 
	컴퓨터는 여러 일을 처리할 때 프로그램 요소들이 움직이는 일정에 따라 작업 순서를 매깁니다.
	이를 스케줄링이라고도 부릅니다. 
	그리고 정해진 일정에 따라 컴퓨터의 중앙처리장치(CPU)가 그 작업을 실행합니다.

	컴퓨터로 노래를 들으면서 한글프로그램을 이용해서 학교 숙제를 하는 경우를 생각해 봅시다. 
	우리가 느끼기에는 컴퓨터에서 두 가지 일이 동시에 이루어지는 것처럼 느껴지지만 사실은 운영체제의 
	멀티태스킹 기능이 두 가지 프로세스를 잘게 쪼개어 명령을 처리할 수 있도록 일정을 짜고, 
	CPU로 명령을 보내 차례대로 필요한 정보를 처리할 수 있도록 하는 과정이 
	눈에 보이지 않는 속도로 이루어지는 것입니다.


@ 학습목표
# 프로세스의 개념을 이해할 수 있다.
# 프로세스 종류별 특징에 대해 명할 수 있다.
# 프로세스의 상태변화를 단계별로 설명할 수 있다.



@ 학습정리
# 프로세스의 개념
- 실행중인 프로그램(작업)이다.
- 운영체제에 들어 있는 프로세스는 제어 블록 PCB 이다.
- 커널에 등록되고 커널의 관리하에 있는 작업이다.
- 각종 자원들을 요청하고 할당 받을 수 있는 개체이다.
- 프로세스 관리 블럭을 할당 받은 개체이다.


# 프로세스의 종류
- 운영체제 프로세스는 프로세스 상태 순서를 제어하거나, 
사용하고 있는 프로세스가 다른 사용자나 운영체제 영역을 
침범하지 못하게 감시하는 기능을 담당한다.
- 사용자 프로세스는 사용자 코드(프로그래밍한 코드)를 수행한다.
- 병행프로세스는 서로 독립적으로 실행되는 독립 프로세스와 
프로세스들이 서로 협력하며 수행되는 협동 프로세스로 구분된다.

# 프로세스의 상태변화
- 프로세스의 상태 변화는 운영체제가 프로세서 스케줄러이용하여 관리한다.
- 프로세서(cpu) 스케줄러는 장기(작업) 스케줄러, 단기(프로세스) 스케줄러, 중기 스케줄러가 있다. 
- 각 프로세스는 생성, 준비, 실행, 대기, 종료 상태로 구분되고 실행하면서 상태가 변한다.

- [생성 상태]는 사용자가 요청한 작업이 커널에 등록되고 PCB가 할당되어 새로운 프로세스가 만들어지는 상태이다.
- [준비상태]는 프로세서(cpu)를 할당 받으려고 기다리는 상태로 필요한 자원이 이미 할당되어 있어서 
즉시 실행 가능한 상태이다.
- [실행상태]는 프로세서를 점유하여 명령어가 실행되는 상태이다.
- [대기상태]는 이벤트나 입출력 대기 신호 발생을 기다리는 상태이다.
- [종료상태]는 프로세스가 프로세서 외의 특정 자원을 요청하고 이를 할당 받을 때까지 기다리고 있는 상태이다.



해결 못한 질문?) 인터럽트와 BLOCK + Wakeup 차이
