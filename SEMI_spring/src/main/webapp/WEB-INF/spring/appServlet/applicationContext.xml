<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- db.properties의 파일 참조 설정 >> 해당 설정을 통해 키를 통해 값을 가져올수 있음-->
 	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  <!-- bean 객체 생성 -->
		<property name="locations"> 	<!--locations(다중 사용) / location(단일 사용) -->
			<list>
				<!-- 가져올 프로퍼티 경로 -->
				<value>classpath:mybatis/db.properties</value>
				<!-- "classpath:"는 "src/main/java" 또는 "src/main/resources"를 찾아준다. -->
			</list>
		</property>	<!-- setter을 이용한 DI -->
	</bean>
	
	
	<!-- BasicDataSource를 통한 마이바티스 config.xml설정 
		: 위에 설정한 db.properties를 읽어서 마이바티스 config.xml설정 파일의 <environments>태그를 해당 ioc컨테이너에서 설정해준다. -->
	
<!-- 		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> -->
<!-- 		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/> -->
<!-- 		<property name="username" value="kh"/> -->
<!-- 		<property name="password" value="kh"/> -->	
		
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">	<!-- BasicDataSource dataSource = new BasicDataSource(); : IoC-->
		<property name="driverClassName" value="${log4jdbc_driver}"/>				<!-- dataSource.setDriverClassName(${driver}); : DI -->
		<property name="url" value="${log4jdbc_url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
	</bean>	
	
	
	<!-- 
		# 마이바티스 객체 요약 설명
		SqlSessionFactoryBuilder : SqlSessionFactory를 생성하기 위한 존재 지역변수(메소드에서 사용)로 생명주기를 관리하는 것이 좋다	
		SqlSessionFactory : SqlSession객체를 인스턴스화기 위해 사용한다. typeAliases<태그>(dto). db.properties, <mapper>태그 를 읽어 생성한다.
							한번 만든뒤 SqlSessionFactory는 애플리케이션을 실행하는 동안 존재해야만 한다. 즉 애플리케이션 스코프로 자바에서는 싱글톤으로 관리해야한다.
		SqlSession 		  : SqlSession 은 데이터베이스에 대해 SQL명령어를 실행하기 위해 필요한 모든 메소드를 가지고 있다. 
							그래서 SqlSession 인스턴스를 통해 직접 SQL 구문을 실행할 수 있다.
							서로 공유되지 않게 매번 생성되는 것이 좋으며 사용할때 마다 닫아주어야한다. 따라서 생명주기는 메소드(지역역)스코프가 되어야한다.
		Mapper 			  : Mapper는 매핑된 구문을 바인딩 하기 위해 만들어야 할 인터페이스이다. 
							mapper 인터페이스의 인스턴스는 SqlSession 에서 생성한다 그래서 SqlSession처럼 메소드 스코프에서 관리되어야 한다.
	 -->
	
	<!-- mybatis의 SqlSessionFactory객체 생성 
			+ 위의 데이터베이스 커넥션풀에 들어 있는 설정 값
			  config.xml파일을 필드값으로 사용한다. -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>	 <!-- 'ref'위의 빈객체 참조 -->
		<property name="configLocation" value="WEB-INF/spring/sqls/semi-config.xml"></property>
										<!-- /SEMI_spring/src/main/webapp/ webapp위의 경로는 자동으로 잡아준다. -->
	</bean>
	
	<!-- mybatis SqlSessionTemplate객체 생성 
			+ 위의 sqlSessionFactory객체를 필드 값으로 받는다.
		 : SqlSession인스턴스화 해주고 해당 객체의 open, close를 자동으로 해준다. -->
	<bean id="sqlSessionTemPlate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	
	<!-- #18 -->
	<!-- 트랜잭션 처리와 관련된 매니저 객체 설정 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
  
 	<!-- 파일 업로드 -->		 
<!-- 	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> -->
<!-- 		<property name="maxUploadSize" value="1000000000"/> -->
<!-- 		<property name="defaultEncoding" value="UTF-8"/> -->
<!-- 	</bean> -->
		
</beans>
