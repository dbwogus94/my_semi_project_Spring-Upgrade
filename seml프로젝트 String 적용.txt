SEMI >> spring 프레임 워크 적용하기 

# 원래 프로젝트는 jsp를 순수 자바코드(<%%>)를 사용하였지만 el / jstl을 연습하기 위해 혼합함.

1. Spring Legacy project 생성

# 자바, spring, Servlet, jsp, maven 버전 올리기
2. pom.xml
	java 1.6 -> 1.8
	springframework-version 3.1.1.RELEASE >> 5.2.3.RELEASE
	Servlet-api  2.5(servlet-api) -> 4.0.1(javax.servle-api)
	jsp-api   -> 2.3.3(javax.servle.jsp-api)
	maven-compiler-plugin (source/target) -> 1.8

3. web.xml: 4.0(프로잭트를 새로 dynamic web project로 생성하여 생성 할 때  web module 4.0으로 하여 그 프로젝트의 web.xml의 <web-app>태그 복사, 복사 붙여넣기)
	
	<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
		xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" 
			id="WebApp_ID" version="4.0">
			
4. 프로젝트에서 오른쪽 클릭 >> [propertise] >> [preject Facets] >> 자바 버전 1.6 / web.xml(Dynamic Web Module) 버전 4.0	으로 변경 저장	

5. maven update	



# pom.xml - Dependency 추가(라이브러리 추가)
6. <dependency>추가 	// 처음은 사용하던것 그대로 이식하였다.
	
	1) 메일전송관련 라이브러리
		javax.activation(1.2.0)
		javax.mail(1.5.5)
		javax.mail-api(1.5.5)

	2) 아파치사 자바 확장 라이브러리
		commons-beanutils(1.9.4)
		commons-collections(3.2.2)
		commons-lang(2.6)
		commons-logging(1.2)

	3) 파일 업로드 관련 라이브러리
		cos(05Nov2002)

	4) json 관련 라이브러리
		ezmorph(1.0.6)
		json-lib(2.4)
		json-simple(1.1.1)
		
	5) 오라클 DB관련 라이브러리
		mybatis(3.5.4)
		mybatis-spring(2.0.3)
		org.springframework.spring-orm(스프링 버전과 동일)	// MyBatis가 해당 기능을 해주는것으로 Dto를 테이블 칼럼과 일치 시키면 자동 매핑되게 해주는 기능을 수행한다.
		commons-dbcp.commons-dbcp(1.4)		// 데이터베이스 커넥션 풀
		ojdbc6(11.2.0.3)
		+ repositories 추가 : oracle사에서 정식으로 dependency를 주고 있지 않기 때문에 외부 저장소를 직접 지정해서 가져와야 한다.
			<repositories>
    			    <repository>
    			        <id>datanucleus</id>
    		  	        <url>http://www.datanucleus.org/downloads/maven2/</url>
    			    </repository>
   			 </repositories>	
		

# web.xml 설정 
	
7. web.xml : 
	1) 전역설정 IoC 컨테이너 경로, 이름 변경 => applicationContext.xml(파일 경로 변경. 파일 이름 변경),
	2) servlet-mapping( ' / ' => ' *.do '로 변경), 
	3) encoding filter(인코딩 필터 적용)
	4) logFilter (로그 필터 적용 >>> 아직 해당 클래스 만들지 않았음)	 


# sql 파일 추가
8. /WEB-INF/spring/sqls/ 경로에 .spl 파일 추가 

# mvc관련 패키지 추가
9. <context:component-scan base-package="com.semi.update" />
	으로 관리되는 패키지에 dto, dao, biz, controller 패키지 추가
 	클래스 추가 이후 DI/IoC Annotation추가
	=======================================
	# 패키지 경로 구조  
	com.semi.update.All.
		.join		- 테이블 join dto
		.Exercise.java	- 운동계산용 클래스(Exercise.java)
		.Util.java		- 유틸 클래스(Util.java)
		.mali		- mail SMTP클래스
	com.semi.update.join
		.join(로그인, 회원가입)
	com.semi.update.member
		.board
		.match
		.mentee.dayMenu
		.mentee.exercise.plan
		.mentee.exercise.total
		.mentee.food
		.profile
		.trade
	=======================================
# mybatis에 사용될 xml파일 추가 
10. src/main/resources/mybatis/*#{메퍼이름}-mapper.xml		// 각각 테이블당 메퍼 따로 추가 >>> 9개 추가
		1) 각각의 메퍼 네임스페이스 변경 
			<mapper namespace="com.semi.update.#{메퍼이름}">  		

11. src/main/resources/mybatis/db.properties		

12. src/main/webapp/WEB-INF/spring/sqls/semi-config.xml	// 1개 통합사용
		1) 각각 dto 추가 
		2) 메퍼추가 				// 20/03/03 진행중
		 
13. applicationContext.xml에 mybatis 자동화 : 
		1) PropertyPlaceholderConfigurer를 이용해 
			외부프로퍼티(db.properties)를 참조할 수 있게 적용
			
		2) 참조한 db.properties를 읽어 
			BasicDataSource(데이터 베이스 커넥션 풀객체) Bean추가
			
		3) mybatis의 SqlSession을 인스턴스화 하기위한 객체
			SqlSessionFactoryBean Bean추가
			(위의 BasicDataSourc와 config.xml파일을 속성으로 사용한다)
			
		4) SqlSessionTemplate Bean추가 
			Session객체의 사용편의성을 위해 사용한다(자동 오픈 클로즈 지원)
		
14. 프로그램 흐름에 맞추어 뷰와 + mvc(dao, biz, controller)생성 적용
	20/03/04 
	: 메인에 필요한 veiw(css+js+img)와 join 패키지 controller 진행중
	
	: 1) 정적자원 처리완료
	  2) 로그인, 회원가입 연결 및 수정중 
	  3) 예외처리 클래스 생성중(dao 예외 발생시 하나의 페이지로 연결 등등 에러 페이지 전환) 	

15. filter
	1) common.LogFilter.java 클래스 생성
		>>> url, queryString, contextType 
	2) web.xml에 생성한 클래스 로그필터에 적용


16. logger(log4j)
	1) <!-- Application Loggers -->  출력 레벨 DEBUG로 변경
	2) <logger name="org.ibatis"> , <logger name="java.sql">  출력 레벨 info로 추가
	3) <root>태그 출력 레벨 info로 변경 
	  
17. LogAop
	1) common.aop.LogAop.Java 클래스 생성
	2)  AspectJ에서 지원하는 @Around적용
	3) servlet-context.xml에 AspectJ가 자동으로 Porxy객체를 생성하게 해주는 <aop:aspectj-autoproxy /> 태그 추가 

18. insert, update, delete 트렌젝션 
설정이 적용이 안되는 중임
미완)

19. 인터셉터	 (미완)
	1) 클래스를 구현하여 설정만 잡아두었음 


20. 에러 핸들러
(미완)


21) 로그인 회원가입  (완)
	1) 일반 로그인, 일반 회원가입
	2) 구글 카카오 sns로그인, sns회원가입

22) SMTP메일 클래스 구현(기존의 코드를 리팩토링)
	1) new javax.mail.Authenticator()를 사용하여 javax.mail.Session 구현
	2) 구현된 javax.mail.Session을 사용하여 메세지를 만드는 객체인 new MimeMessage(javax.mail.Session)생성
	3) 메세지 전송시 난수를 생성하여 전송
	4) 컨트롤레에서 사용자가 입력된 값과 비교 
	
23) MentorController , MenteeController, AdminController 생성
(기존의 profileController를 위의 3개의 컨트롤러로 구성 변경) 

24) mentor_profile 페이지 재구성
	-부트스트렙 
	-데이트 피커
	-태그 
	-구성 변경
	-자바스크립트 재적용

25) 하이버네이트에서 주는 유효성검사를 사용을 위해 mentor_profile 페이지 form:from 적용	(완)
	오류) f:lable를 사용하면 적용되지 않는 문제 해결해야함
	미완) 프로필 사진 올리기
	미완) 탈퇴하기
	미완) 비밀번호 변경
	미완) 핸드폰번호 중복확인

26) 기존 ProFileDto에서 역할별로 쪼갠 MentorDto를 생성 그에 맞추어 맞추어 model 재구성, mapper재구성	(완)
27) 프로필 작성, 수정 : 멘토 로그인 >> (프로필이 작성되어 있다면)? 멘토메인으로 이동 : 프로필작성 페이지로 이동   (완)
	 1) 멘토메인 >>  프로필 수정페이지 		// 프로필 수정기능 완료
	 2) 프로필페이지 >>> 프로필 작성하기 		// 프로필 작성기능 완료


28) 자바스크립트 업로드한 이미지 미리보기 분석 및 구현
	바닐라 스크립트로 구현 완료

# 파일 업로드 섭네일 기능 구현
29) pom.xml에 디펜던시 설정
	1) 파일 업로드
		commons-fileupload.commons-fileupload (1.3.3)
	2) 섬네일 크기 조절
		net.coobird.thumbnailator(0.4.8)

30) fileUpload-context.xml생성 web.xml에서 appServlet(DispatcherServlet)의 파라미터에 추가
	1) 업로드 패스 설정
	2) 파일업로드빈 CommonsMultipartResolver Di/Ioc 설정 

31) UploadFileUtils 클래스 - 구현기능 :  
	1) 파일업로드 + 썸내일 생성 : 스프링에서 제공하는 파일 FileCopyUtils.copy(fileData, target); 기능과 썸내일 생성 라이브러리를 사용
	2) 파일명 생성 : 요일에 맞춘 파일명 생성
	3) 파일업로드 :  스프링의 MultipartFile을 사용하여 파일업로드 구현
	3) 프로필 업로드 :  스프링의 MultipartFile을 사용하여 프로필 사진 업로드 구현	
			>>> 향후 개선할 것. 	1) 서버측에서 보안을 위해 이미지 필터링 만들것 
					2) 대형파일이 올라올시 작은 크기로 압축하여 저장할 수 있는 기능 구현할 것
32) Util 클래스 생성
	1) 경로의 파일 총개를 구하는 메서드
	2) 경로의 파일의 이름 배열로 가져오는 메서드

33) 프로필 사진 업로드 완료
	1) 최초 정보입력시 파일업로드
	2) 정보 수정시 파일을 추가하지 않았을 경우 파일업로드 실행하지 않게 처리함
	3) 파일 저장시 원본 파일과, 크기를 줄인 파일 저장 >> view에는 크기를 줄인 파일 적용





	